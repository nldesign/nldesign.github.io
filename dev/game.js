// Variables to store the game elements
var button = document.getElementById("button");
var counter = document.getElementById("counter");
var upgrade = document.getElementById("upgrade");
var auto = document.getElementById("auto");
var story = document.getElementById("story");

// Variables to store the game data
var clicks = 0; // The number of times the player has clicked the button
var cps = 0; // The number of clicks per second generated by the auto-clicker
var cost = 10; // The cost of the upgrade
var level = 1; // The level of the upgrade
var progress = 0; // The progress of the story

// Function to update the game state
function update() {
  // Increase the clicks by the cps
  clicks += cps;
  // Update the counter display
  counter.innerHTML = "Clicks: " + Math.floor(clicks);
  // Update the upgrade display
  upgrade.innerHTML = "Upgrade (" + cost + " clicks)";
  // Update the auto-clicker display
  auto.innerHTML = "Auto-clicker (" + cps + " cps)";
  // Check if the player can afford the upgrade
  if (clicks >= cost) {
    // Enable the upgrade button
    upgrade.disabled = false;
  } else {
    // Disable the upgrade button
    upgrade.disabled = true;
  }
  // Check if the player has reached a story milestone
  if (clicks >= 100 * progress) {
    // Increase the progress
    progress++;
    // Update the story display
    story.innerHTML = getStory(progress);
  }
  // Save the game data
  save();
}

// Function to handle the button click
function clickButton() {
  // Increase the clicks by one
  clicks++;
  // Update the game state
  update();
}

// Function to handle the upgrade click
function clickUpgrade() {
  // Decrease the clicks by the cost
  clicks -= cost;
  // Increase the level by one
  level++;
  // Increase the cost by 10%
  cost = Math.floor(cost * 1.1);
  // Increase the cps by the level
  cps += level;
  // Update the game state
  update();
}

// Function to get the story text based on the progress
function getStory(progress) {
  // Switch statement to return different texts
  switch (progress) {
    case 0:
      return "You are a bored office worker who likes to click a button on your computer.";
    case 1:
      return "You discover that the button gives you a small amount of money every time you click it.";
    case 2:
      return "You decide to invest some of your money in an upgrade that makes the button more profitable.";
    case 3:
      return "You buy an auto-clicker that clicks the button for you, even when you are away.";
    case 4:
      return "You quit your job and focus on clicking the button full-time.";
    case 5:
      return "You hire a team of programmers to create more upgrades and auto-clickers for you.";
    case 6:
      return "You become the richest person in the world thanks to your button empire.";
    case 7:
      return "You launch a rocket to the moon with a giant button on it.";
    case 8:
      return "You click the moon button and trigger a massive explosion that destroys the earth.";
    case 9:
      return "You realize that you have made a terrible mistake and wish you could go back to your boring office job.";
    default:
      return "The end.";
  }
}

// Function to save the game data
function save() {
  // Use localStorage to store the game data as strings
  localStorage.setItem("clicks", clicks.toString());
  localStorage.setItem("cps", cps.toString());
  localStorage.setItem("cost", cost.toString());
  localStorage.setItem("level", level.toString());
  localStorage.setItem("progress", progress.toString());
}

// Function to load the game data
function load() {
  // Use localStorage to get the game data as strings
  var savedClicks = localStorage.getItem("clicks");
  var savedCps = localStorage.getItem("cps");
  var savedCost = localStorage.getItem("cost");
  var savedLevel = localStorage.getItem("level");
  var savedProgress = localStorage.getItem("progress");
  // Check if the game data exists
  if (savedClicks && savedCps && savedCost && savedLevel && savedProgress) {
    // Parse the strings as numbers and assign them to the game data variables
    clicks = parseFloat(savedClicks);
    cps = parseFloat(savedCps);
    cost = parseFloat(savedCost);
    level = parseFloat(savedLevel);
    progress = parseFloat(savedProgress);
  }
}

// Function to reset the game data
function reset() {
  // Confirm with the player that they want to reset the game
  if (confirm("Are you sure you want to reset the game?")) {
    // Set the game data variables to their initial values
    clicks = 0;
    cps = 0;
    cost = 10;
    level = 1;
    progress = 0;
    // Update the game state
    update();
  }
}

// Add event listeners to the buttons
button.addEventListener("click", clickButton);
upgrade.addEventListener("click", clickUpgrade);

// Load the game data
load();

// Update the game state
update();

// Set the game loop to run every 100 milliseconds
setInterval(update, 100);
